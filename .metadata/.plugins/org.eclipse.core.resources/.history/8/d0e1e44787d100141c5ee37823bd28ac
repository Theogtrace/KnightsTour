package example;

public class KnightTour {
	static int count=0;
	private static boolean solved=false;
	public static void main(String[]args){
		KnightTour a= new KnightTour ();

		a.tour(8,8);
		System.out.println("Recursive function called "+ count+ " times");

	}


	public void print(int[][] b){
		for (int x = 0; x < b.length; x ++){
			for (int y = 0; y < b[0].length; y ++){
				
				System.out.print("  "+ b[x]  [y] +  " ");
			
				
			}
			System.out.println("  ");
		}
	}

	public int[][] tour(int l, int w){
	
		int[][] board = new int[l][w];
		for (int x = 0; x < l; x ++){
			for (int y = 0; y < w; y ++){
				Fill(board, x , y ,1);
				if (solved){
					print(board);
					return board;
				}
			}
		}
		System.out.println("No solution");

		print(board);
		return board;
	}
	public static void Fill(int[][] board,int row, int col,  int num){
		count++;
		if(board[row][col] == 0){
			board[row][col] = num;
			if (num == board.length * board[0].length){
				solved = true;

			}
			num ++;
//			1
			if(!solved){
				if(row + 2 < board.length && col + 1 < board[0].length
						&& row + 2 >= 0 && col + 1 >= 0)
					Fill(board, row + 2, col + 1,num);
			}
//			2
			if(!solved){
				if(row + 1 < board.length && col + 2 < board[0].length
						&& row + 1 >= 0 && col + 2 >= 0)
					Fill(board, row + 1,  col+ 2,num);
			}
//			3
			if(!solved){
				if(row - 1 < board.length && col + 2 < board[0].length
						&& row - 1 >= 0 && col + 2 >= 0)
					Fill(board,  row - 1, col + 2,num);
			}
//			4
			if(!solved){
				if(row - 2 < board.length && col + 1 < board[0].length
						&& row - 2 >= 0 && col + 1 >= 0)
					Fill(board , row - 2, col + 1,num);
			}
//			5
			if(!solved){
				if(row -2  < board.length && col - 1 < board[0].length
						&& row - 2 >= 0 && col - 1 >= 0)
					Fill(board , row -2, col - 1,num);
			}
//			6
			if(!solved){
				if(row - 1 < board.length && col - 2 < board[0].length
						&& row - 1 >= 0 && col - 2 >= 0)
					Fill(board , row - 1, col - 2,num);
			}
//			7
			if(!solved){
				if(row + 1 < board.length && col - 2 < board[0].length
						&& row + 1 >= 0 && col - 2 >= 0)
					Fill(board , row + 1, col - 2,num);
			}
//			8
			if(!solved){
				if(row + 2 < board.length && col - 1 < board[0].length
						&& row + 2 >= 0 && col - 1 >= 0)
					Fill(board ,   row + 2, col - 1,num);
			}
			if(!solved){
				board[row][col] = 0;
				num --;
			}
		}
	}
}