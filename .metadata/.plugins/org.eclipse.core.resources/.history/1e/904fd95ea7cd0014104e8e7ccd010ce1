package knightTour;


public class KnightTour {




	private static int N = 0;

	private static int count=0;

private static int moves[][];



	public static void main(String []args){
		//create an array for the board
		int[][] board = {
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1},
				{-1, -1, -1,-1, -1, -1, -1, -1}
		};
		
		KnightTour a= new KnightTour(0);
		a= new KnightTour(5);
	    a= new KnightTour(8);
		
	a.Fill(board,0,0,0);
		
	    
		}
	//the array of the two dimensional is going to be here
	public KnightTour(int length) {
		N= length;
	moves= new int[N][N];
		
}

//	Recursive Sub-routine for Knight's Tour
	public static void Fill(int[][]board, int row, int col, int move){
	
		count++;//counting the moves 
		if(solveTour(board,row,col))
		{
		board[row][col]=move;
		if(move == (moves.length* moves.length- 1))
		{
		printSol(board);
		
		}
		else
		{
		// All Coordinates from given (row,col)
			Fill(board,row + 2 , col + 1, move+1 );
			Fill(board,row + 1 , col + 2, move+1 );
			Fill(board,row - 1 , col + 2, move+1 );
			Fill(board,row - 2 , col + 1, move+1 );
		    Fill(board,row - 2 , col - 1, move+1 );
			Fill(board,row - 1 , col - 2, move+1 );
			Fill(board,row + 1 , col - 2, move+1 );
			Fill(board,row + 2 , col - 1, move+1 );
	
		board[row][col]=-1;
		}
		}
		}
//	 Checks if for given row and col, the move is Valid or not
//	true: Valid Mode, false: Invalid Move
	private static boolean solveTour(int[][] board, int row, int col) {
		if(row >= 0 && row < moves.length&& col>=0 && col <moves.length && board[row][col]==-1)
			return true;
			return false;
			}

//	Prints the Chessboard having the hops
//	board
	private static void printSol(int[][] board) {
		
		
		for(int i=0;i<moves.length;i++)
		{
		for(int j=0;j<moves.length;j++)
		{
			
		System.out.print(board[i][j]+ "\t");
		}
		System.out.println();
		}
		System.out.println("recursive Function called " + count + " times");
		
}}